@startuml

Participant "func: funcionario" as funcionario
Participant "empresa : Empresa" as empresa
' Participant "listaFun : ListaDefuncionarios" as listafuncionarios
' Participant "venda: Venda" as venda
' Participant "pgto: Pagamento" as pagamento
Participant "ponto: Ponto" as ponto
Participant "baseProj: BaseDeDadosProjetos" as baseProjeto

-> funcionario: solicitaInsercaoHoras()
activate funcionario
funcionario -> ponto: ponto = procuraPonto(func)
activate ponto
loop
    ponto -> ponto : procuraPonto(func)
    alt não encontrou
        ponto -> ponto: criaPonto(func, dataIni, dataFim)
    end
end
deactivate ponto

funcionario -> empresa: getListaCobrancas()
activate empresa
empresa -> baseProj: lista = getListaNumCob()
activate baseProj
loop proj in projetos
    baseProj -> baseProj: num.append(getNumCob())
end
deactivate baseProj

empresa --> funcionario: mostra a lista
alt Serviço Disponível

    funcionario -> empresa : insereHoras(horas)
    alt Quantidade Válida
        'não sei como fazer muito bem
        empresa -> empresa : salva alterações no cartão de ponto

    else Quantidade Inválida

        funcionario <-- empresa : exibe erro de quantidade de horas inválida
        funcionario <-- empresa : retorna para a tela de preenchimento de horas

        alt Re-preenche

            funcionario -> empresa : insereHoras(horas)

        else Cancela

            funcionario -> empresa : cancelaOp()
            empresa <- empresa : termina a execução

        end

    else Cartão enviado

    alt ok
        funcionario <-- empresa : exibe o cartão que já foi enviado
    else já enviado
        funcionario <-- empresa : exibe erro explicando que o cartão já foi enviado e não pode mais ser alterado
    end
        funcionario -> empresa : confirma()

        empresa <- empresa : termina()

    end

else Serviço Indisponível

    funcionario <-- empresa : exibe erro informando que a lista de números de cobrança não está disponível
    
    alt Continuar Sem Números Novos

        funcionario -> empresa : insereHoras(horas)

    else Cancelar

        funcionario -> empresa : cancelaOp()
        empresa <- empresa : termina a execução

    end
end
|||
|||
funcionario -> empresa : enviaPonto(ponto)
empresa -> empresa : ponto.Data = getDate()
empresa -> empresa : ponto.status = enviado
empresa -> empresa : valida(ponto)
activate baseProj
loop cobranca in ponto.cobrancas
    empresa -> baseProj : armazenaHoras(ponto.horas)
    baseProj -> baseProj: proj[].armazena()
end
deactivate baseProj

empresa -> empresa : salvaCartao(ponto)
empresa -> empresa : ponto.status = leitura
funcionario <-- empresa : exibe mensagem de sucesso
deactivate funcionario
empresa -> empresa : termina a execução

@enduml